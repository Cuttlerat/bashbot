#!/bin/bash -
#===============================================================================
#
#    DESCRIPTION: Telegram weather bot
#         AUTHOR: Kioller Alexey
#         E-MAIL: avkioller@gmail.com
#         GITHUB: https://github.com/Cuttlerat/bashbot
#        CREATED: 07.07.2017
#
#===============================================================================

#===  CONSTANTS  ===============================================================

    readonly             KEY="$1"
    readonly     WEATHER_KEY="$2"        # https://www.worldweatheronline.com/
    readonly       LOCATIONS="/data/.locations"
    readonly       J_PINGERS="/data/.pingers.json"
    readonly  DEFAULT_CITY_2="Ленинград"
    readonly         TIMEOUT="10"
    readonly             URL="https://api.telegram.org/bot${KEY}"
    readonly         BOTNAME="@$( curl -s "${URL}/getMe" |           \
                               jq .result.username    | tr -d '"' )"

#===  FUNCTIONS  ===============================================================

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================

function _usage ()
{
	cat <<- EOF

  Usage :  ${0##/*/} [options] [--] "<BOT_TOKEN>" "<WEATHER_TOKEN>"

  Github:  https://github.com/Cuttlerat/bashbot

  Options: 
  -h|help       Display this message

	EOF

}    # ----------  end of function _usage  ----------

#===  FUNCTION  ================================================================
#          NAME:  _send_text
#   DESCRIPTION:  Sending request to telegram api
#===============================================================================
function _send_text {

    curl -s "${URL}/sendMessage"                                              \
            --max-time "${TIMEOUT}"                                           \
            --output /dev/null                                                \
            --data-urlencode "text=${TEXT}"                                   \
                      --data "chat_id=${CHAT_ID}"                             \
                      --data "disable_web_page_preview=${PREVIEW}"                     

}    # ----------  end of function _send_text  ----------

#===  FUNCTION  ================================================================
#          NAME:  _weather_request
#   DESCRIPTION:  Sending request to https://worldweatheronline.com/ api
#===============================================================================
function _weather_request {

    curl -s "https://api.worldweatheronline.com/premium/v1/weather.ashx"      \
                  --data-urlencode "q=${ARGS:="${DEFAULT_CITY_2}"}"           \
                            --data "key=${WEATHER_KEY}"                       \
                            --data "format=json"                              \
                            --data "timezone=yes"                             \
                            --data "date=today"                               \
                            --data "fx24=yes"                                 \
                            --data "lang=ru"                                

}    # ----------  end of function _weather_request  ----------

#===  FUNCTION  ================================================================
#          NAME:  _ibash
#   DESCRIPTION:  Getting randow quote from http://ibash.org.ru
#===============================================================================
function _ibash {

               TEXT="$( curl -s http://ibash.org.ru/random.php               |\
                        w3m -dump -cols 300 -T 'text/html'                   |\
                        awk '/#[0-9]+/{f=1}/━+/{f=0}f'                       |\
                        sed '1s/ +.*//'                                      )"
               _send_text 1>&2

}    # ----------  end of function _ibash  ----------

#===  FUNCTION  ================================================================
#          NAME:  _loglist
#   DESCRIPTION:  Getting randow quote from http://loglist.net
#===============================================================================
function _loglist {

               TEXT="$( curl -sL https://loglist.net/api/quote/random        |\
                        jq -r .id,.content                                   |\
                        sed '1s/^/#/' )"                              
               _send_text 1>&2

}    # ----------  end of function _loglist  ----------

#===  FUNCTION  ================================================================
#          NAME:  _qcycle
#   DESCRIPTION:  Cycle for a quotes functions
#===============================================================================
function _qcycle {

               QCOUNT="$( sed -r 's/^[^1-5]$/5/;
                                  s/^[0-9]{2,}$/5/;
                                  s/.*[^0-9].*/1/' <<< "${ARGS}" )"
               [[ ${QCOUNT:=1} ]]
               for ((i=0;i<QCOUNT;i++)); do
                   _"$1"
               done
               _log_echo "$1 ${QCOUNT} by @${SENDER}"

}    # ----------  end of function _qcycle  ----------

#===  FUNCTION  ================================================================
#          NAME:  _log_echo
#   DESCRIPTION:  Echo into log with timestamp
#===============================================================================
function _log_echo {

               date +"[%H:%M]: $1" 1>&2

}    # ----------  end of function _log_echo  ----------

#===  FUNCTION  ================================================================
#          NAME:  _offset
#   DESCRIPTION:  Making offset for processed messages
#===============================================================================
function _offset {

               curl -s "${URL}/getUpdates" \
                    --data "offset=$((UPDATE_ID + 1))" \
                    -o /dev/null

}    # ----------  end of function _offset  ----------

#===  FUNCTION  ================================================================
#          NAME:  _load_pingers
#   DESCRIPTION:  Loading json with usernames and regex for its
#      REQUIRES:  ${J_PINGERS}
#===============================================================================
function _load_pingers {

               J_COUNT=$( jq -r '.users | length' "${J_PINGERS}") 
               J_ARR=()

               for I_USER in $( seq 0 $(( ${J_COUNT:=0} - 1 )) 2>/dev/null ); do

                        J_USERNAME=$( jq -r  .users["${I_USER}"].username             "${J_PINGERS}"  )
                    J_REGEXP_COUNT=$( jq -r ".users[${I_USER}].regexp | length"       "${J_PINGERS}"  ) 
                   for I_REGEXP in $( seq 0 $(( ${J_REGEXP_COUNT:=0} - 1 )) 2>/dev/null ); do

                          J_REGEXP=$( jq -r  .users["${I_USER}"].regexp["${I_REGEXP}"] "${J_PINGERS}" )
                             J_ARR+=( "${J_REGEXP};${J_USERNAME}" )
                   done
               done

}    # ----------  end of function _load_pingers  ----------

#===  END OF FUNCTIONS  ========================================================

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

while getopts "h" opt
do
  case $opt in

    h|help )  _usage; exit 0   ;;

    ? )  _usage; exit 1  ;;

  esac    
done
shift $(($OPTIND-1))

#===  FILES CHECKING  ==========================================================

[[ ! -d    "/data"     ]] && mkdir /data
[[ ! -f "${LOCATIONS}" ]] && touch "${LOCATIONS}"
[[ ! -f "${J_PINGERS}" ]] && touch "${J_PINGERS}"

#===  START  ===================================================================

_log_echo "Started"
_load_pingers

while sleep 1; do

    RAW_MESSAGE=$( curl -s "${URL}/getUpdates" )
      MSG_COUNT=$( jq '.result | length' <<< "${RAW_MESSAGE}" )

    for i in $( seq 1 "${MSG_COUNT:=0}" ); do

        RESULT_COUNTER=$(( i-1 ))

      UPDATE_ID=$( jq .result[${RESULT_COUNTER}].update_id                          <<< "${RAW_MESSAGE}"  )
        CHAT_ID=$( jq .result[${RESULT_COUNTER}].message.chat.id                    <<< "${RAW_MESSAGE}"  )

        #-------------------------------------------------------------------------------
        # Checking that the command was sent to your bot
        #-------------------------------------------------------------------------------
        PRIVATE=$( jq  -r .result[${RESULT_COUNTER}].message.chat.type              <<< "${RAW_MESSAGE}"  | sed -r "s/private/true/" )
      CMD_CHECK=$( jq  -r .result[${RESULT_COUNTER}].message.text                   <<< "${RAW_MESSAGE}"  )
        MESSAGE=$( sed -r "s/${BOTNAME}//"                                          <<< "${CMD_CHECK}"    )
        [[ ! "${PRIVATE}" == "true" ]] && PRIVATE=false

        #-------------------------------------------------------------------------------
        # Google command parser
        #-------------------------------------------------------------------------------
        MESSAGE=$( sed -r 's#^(окей,? гугл,? )?(ч(е|ё|то) (такое|за))\s+(.+)#/google \5#i'                \
                                                                                    <<< "${MESSAGE}"      )
        MESSAGE=$( sed -r 's#^(окей,? гугл,?)\s+(.+)#/google \2#i'                  <<< "${MESSAGE}"      )

        #-------------------------------------------------------------------------------
        # Rick and Morty easter egg
        #-------------------------------------------------------------------------------
        MESSAGE=$( sed -r "s/^SHOW ME WHAT YOU GOT/\/show/"                         <<< "${MESSAGE}"      )

        #-------------------------------------------------------------------------------
        # Parsing pingers in message if message doesn't start with command
        #-------------------------------------------------------------------------------
        if [[ ! "${MESSAGE}" =~ ^/[a-zA-Z0-9]+ ]]; then 
           PING_MESSAGE=$( sed -r 's/(.)\1*/\1/g;s/[.,]*//g'                        <<< "${MESSAGE,,}"    )
            for k in "${J_ARR[@]}"; do
               if [[ "${PING_MESSAGE,,}" =~ ${k%%;*} ]]; then
                MESSAGE=$( sed -r "s/.*\b${k%%;*}\b.*/\/ping &/"                    <<< "${PING_MESSAGE}" )
                break
            fi
            done
        fi

           ARGS=$( awk '{$1="";print $0}'                                           <<< "${MESSAGE}"      | xargs 2>/dev/null )
        COMMAND=$( awk '{print $1}'                                                 <<< "${MESSAGE}"      )
         SENDER=$( jq  -r .result[${RESULT_COUNTER}].message.from.username          <<< "${RAW_MESSAGE}"  )

#===  COMMANDS  ================================================================

        case "${COMMAND}" in

           /w|/weather)

               #-------------------------------------------------------------------------------
               # Trying to fix https://github.com/Cuttlerat/bashbot/issues/5
                       ARGS=$( sed 's/^\s*$/'"${DEFAULT_CITY_2}"'/g' <<< "${ARGS}" ) 
               #-------------------------------------------------------------------------------

                RAW_WEATHER=$( _weather_request )
                       TEMP=$( jq -r .data.current_condition[0].temp_C           <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                    COMMENT=$( jq -r .data.current_condition[0].lang_ru[0].value <<< "${RAW_WEATHER}" )
                       CITY=$( jq -r .data.request[0].query                      <<< "${RAW_WEATHER}" )
                UPDATE_TIME=$( jq -r .data.current_condition[0].observation_time <<< "${RAW_WEATHER}" ) 

                [[ -z ${ARGS} ]] && grep -q "${SENDER}" "${LOCATIONS}" && CITY=$( sed -n "s/${SENDER};//p" "${LOCATIONS}" )

                if [[ "${CITY}" == "null" ]] || [[ "${CITY}" == "" ]]
                then
                    TEXT="Wrong location!"
                else
                    TEXT=$( echo -e "[${UPDATE_TIME}]: ${TEMP} ${COMMENT}\n${CITY}" )
                fi

                _send_text
                _log_echo "Weather \"${CITY}\" to @${SENDER}"                               
                ;;

           /info)

                TEXT=$( sed 's/^\s\+//' <<<\
                     "This is my first bot on Bash.
                      You can see the code here https://github.com/Cuttlerat/bashbot
                      by @Cuttlerat" )
                _send_text
                ;;

           /start)

                TEXT=$( sed 's/^\s\+//' <<<\
                     'Enter "/weather (or /w) City" to see what temprature is there for now

                      Example: /w London' )
                _send_text
                ;;

           /ibash)

                _qcycle "ibash"
                ;;

           /loglist)

                _qcycle "loglist"
                ;;

           /restart|/reboot)

                TEXT="Rebooting..."
                _send_text
                _log_echo "Reboot by @${SENDER}"
                _offset
                exit
                ;;

           /wset)
                
                if [[ -z ${ARGS} ]] || [[ ${ARGS} =~ [Dd]elete ]]; then
                    if grep -q "${SENDER}" "${LOCATIONS}"; then 
                        sed -i "/${SENDER}/d" "${LOCATIONS}"
                        TEXT="Deleted information about @${SENDER}"
                    else
                        TEXT="No information about @${SENDER}"
                    fi
                elif grep -q "${SENDER}" "${LOCATIONS}"; then
                    sed -i "s/${SENDER};.*/$SENDER;${ARGS}/" "${LOCATIONS}"
                    TEXT="New city for @${SENDER}: ${ARGS}"
                else 
                    echo "${SENDER};${ARGS}" >> "${LOCATIONS}"
                    TEXT="Added @${SENDER}: ${ARGS}"
                fi
                _send_text
                _log_echo "$TEXT"
                ;;

           /md5)

                TEXT=$( md5sum <<< "${ARGS}" | awk '{print $1}' )
                _send_text
                _log_echo "MD5 to @${SENDER}"
                ;;

           /google)

               ARGS=${ARGS//\?/}
               PREVIEW=0
               TEXT="https://www.google.ru/search?q=${ARGS// /+}"
               _send_text
               _log_echo "Google: \"${ARGS}\" by @${SENDER}"
               PREVIEW=1
               ;;

           /show)

               PREVIEW=0
               TEXT="https://www.youtube.com/watch?v=I1188GO4p1E"
               _send_text
               _log_echo "Shchwifty by @${SENDER}"
               PREVIEW=1
               ;;

           /roll)
           
               TEXT=$(( RANDOM % 100 ))
               _send_text
               _log_echo "Rolled \"${TEXT}\" by @${SENDER}"
               ;;

           /ping)

               PING=()
               for I_ARGS in ${ARGS,,}; do
                   for I_REGEXP in "${J_ARR[@]}"; do
                       if [[ ${I_ARGS} =~ ${I_REGEXP%%;*} ]]; then
                           PING+=(${I_REGEXP##*;})
                       fi
                   done
               done

               if [[ ! -z ${PING[*]} ]]; then
                   USERNAMES=()
                   for USERNAME in $( xargs -n1 <<< "${PING[@]}" | sort -u ); do

                       USERNAMES+=("@${USERNAME}")
                   done
                   TEXT="${USERNAMES[*]}"
                   _send_text
                   _log_echo "Ping to \"${TEXT}\" by @${SENDER}"
               fi
               ;;

           /*)

               if ${PRIVATE} || [[ $CMD_CHECK =~ /*${BOTNAME} ]]; then                               
                   TEXT="No such command"                                                   
                   _send_text                                                               
                   _log_echo "Bad command \"${CMD_CHECK}\" by @${SENDER}"
               fi
               ;;

        esac

        _offset
   done
done
