#!/usr/bin/env bash 
#===============================================================================
#
#    DESCRIPTION: Telegram bot in bash
#         AUTHOR: Kioller Alexey
#         E-MAIL: avkioller@gmail.com
#         GITHUB: https://github.com/Cuttlerat/bashbot
#        CREATED: 07.07.2017
#
#===============================================================================

#===  CHECKING TOKENS FILE  ====================================================

[[ -f ./tokens ]] && . ./tokens 

#===  CONSTANTS  ===============================================================

    [[ "${BOT_TOKEN:="$1"}" ]]
    [[ "${WEATHER_TOKEN:="$2"}" ]]
    readonly       BOT_TOKEN
    readonly   WEATHER_TOKEN
    readonly          ADMINS
    readonly        DATABASE="./database/database.db"
    readonly         TIMEOUT="10"
    readonly             URL="https://api.telegram.org/bot${BOT_TOKEN}"
    readonly         BOTNAME="@$( curl -s "${URL}/getMe" |           \
                                  jq .result.username    | tr -d '"' )"

#===  FUNCTIONS  ===============================================================

#===  FUNCTION  ================================================================
#         NAME:  _usage
#  DESCRIPTION:  Display usage information.
#===============================================================================

function _usage ()
{
	cat <<- EOF

  Usage :  ${0##/*/} [options] [--] "<BOT_TOKEN>" "<WEATHER_TOKEN>"

  Github:  https://github.com/Cuttlerat/bashbot

  Options: 
  -h|help       Display this message

	EOF

}    # ----------  end of function _usage  ----------

#===  FUNCTION  ================================================================
#          NAME:  _send_text
#   DESCRIPTION:  Sending request to telegram api
#===============================================================================
function _send_text {

    local TEXT=$( sed 's/^\s\+//g' <<< "${1}" )
    curl -s "${URL}/sendMessage"                                              \
            --max-time "${TIMEOUT}"                                           \
            --output /dev/null                                                \
            --data-urlencode "text=${TEXT}"                                   \
                      --data "chat_id=${CHAT_ID}"                             \
                      --data "disable_web_page_preview=${PREVIEW}"            \
                      --data "parse_mode=${PARSE_MODE}"                     

}    # ----------  end of function _send_text  ----------

#===  FUNCTION  ================================================================
#          NAME:  _weather_request
#   DESCRIPTION:  Sending request to https://worldweatheronline.com/ api
#===============================================================================
function _weather_request {

    curl -s "https://api.worldweatheronline.com/premium/v1/weather.ashx"      \
               --data-urlencode "q=${ARGS:="$(_get_default_city)"}"           \
                            --data "key=${WEATHER_TOKEN}"                     \
                            --data "format=json"                              \
                            --data "num_of_days=2"                            \
                            --data "fx24=yes"                                 \
                            --data "lang=ru"                                

}    # ----------  end of function _weather_request  ----------

#===  FUNCTION  ================================================================
#          NAME:  _get_default_city
#   DESCRIPTION:  Get the default city from the database
#===============================================================================
function _get_default_city {

    sqlite3 "${DATABASE}" "SELECT city 
                           FROM locations
                           WHERE username=\"default_city\""

}    # ----------  end of function _get_default_city  ----------

#===  FUNCTION  ================================================================
#          NAME:  _get_emoji
#   DESCRIPTION:  Get the emoji for weather
#    PARAMETERS:  $1 - Weather code
#===============================================================================
function _get_emoji {

    read WEATHER_CODE
    case $WEATHER_CODE in 

        113) 
            echo "☀️" 
            ;; # Sunny
        116) 
            echo "🌥" 
            ;; # Partly cloudy
        119)
            echo "⛅️"
            ;; # Cloudy
        122)
            echo "☁️"
            ;; # Overcast
        143|248|260) 
            echo "🌫" 
            ;;  # Fog
        176|263|266|281|293|296|299|\
        302|311|317|362) 
            echo "🌧" 
            ;; # Light rain
        179|182|185|227|230|323|326|\
        329|332|335|338|350|353|368|\
        371|374|377) 
            echo "🌨"
            ;; # Snow
        200) 
            echo "🌩"
            ;; # Thunder
        284|305|308|314|320|356|359|365)
            echo "🌧"
            ;; # Heavy rain
        386|389|392|395)
            echo "⛈"
            ;; # Rain with thunder

    esac

}    # ----------  end of function _get_emoji  ----------

#===  FUNCTION  ================================================================
#          NAME:  _ibash
#   DESCRIPTION:  Getting random quote from http://ibash.org.ru
#===============================================================================
function _ibash {

               TEXT="$( curl -s http://ibash.org.ru/random.php               |\
                        w3m -dump -cols 300 -T 'text/html'                   |\
                        awk '/#[0-9]+/{f=1}/━+/{f=0}f'                       |\
                        sed '1s/ +.*//'                                      )"
               _send_text "${TEXT}" 1>&2

}    # ----------  end of function _ibash  ----------

#===  FUNCTION  ================================================================
#          NAME:  _loglist
#   DESCRIPTION:  Getting random quote from http://loglist.net
#===============================================================================
function _loglist {

               TEXT="$( curl -sL https://loglist.net/api/quote/random        |\
                        jq -r .id,.content                                   |\
                        sed '1s/^/#/' )"                              
               _send_text "${TEXT}" 1>&2

}    # ----------  end of function _loglist  ----------

#===  FUNCTION  ================================================================
#          NAME:  _qcycle
#   DESCRIPTION:  Cycle for a quotes functions
#===============================================================================
function _qcycle {

               QCOUNT="$( sed -r 's/^[^1-5]$/5/;
                                  s/^[0-9]{2,}$/5/;
                                  s/.*[^0-9].*/1/' <<< "${ARGS}" )"
               [[ ${QCOUNT:=1} ]]
               for ((i=0;i<QCOUNT;i++)); do
                   _"$1"
               done
               _log_echo "$1 ${QCOUNT} by @${SENDER}"

}    # ----------  end of function _qcycle  ----------

#===  FUNCTION  ================================================================
#          NAME:  _log_echo
#   DESCRIPTION:  Echo into STDERR with timestamp
#===============================================================================
function _log_echo {

               date +"[%d/%b/%Y:%H:%M:%S %z]: $1" 1>&2

}    # ----------  end of function _log_echo  ----------

#===  FUNCTION  ================================================================
#          NAME:  _offset
#   DESCRIPTION:  Offset messages
#===============================================================================
function _offset {

               curl -s "${URL}/getUpdates" \
                    --data "offset=$((UPDATE_ID + 1))" \
                    -o /dev/null

}    # ----------  end of function _offset  ----------

#===  END OF FUNCTIONS  ========================================================

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

if [[ -z ${BOT_TOKEN} ]]; then _usage; exit 1; fi

while getopts "h" opt
do
  case $opt in

    h|help )  _usage; exit 0   ;;

    ? )  _usage; exit 1  ;;

  esac    
done
shift $((OPTIND-1))

#===  DATABASE CHECKING  =======================================================

if [[ ! -w "${DATABASE}" ]]; then 
    touch "${DATABASE}"
    chmod 600 "${DATABASE}"
fi
{
    sqlite3 "${DATABASE}" "CREATE TABLE answers(
                           match varchar(255) PRIMARY KEY,
                           string varchar(255));"

    sqlite3 "${DATABASE}" "CREATE TABLE google(
                           match varchar(255) PRIMARY KEY);"

    sqlite3 "${DATABASE}" "CREATE TABLE google_ignore(
                           ignore varchar(255) PRIMARY KEY);"

    sqlite3 "${DATABASE}" "CREATE TABLE locations(
                           username varchar(255) PRIMARY KEY,
                           city varchar(255));"

    sqlite3 "${DATABASE}" "CREATE TABLE ping_phrases(
                           phrase varchar(255) PRIMARY KEY);"

    sqlite3 "${DATABASE}" "CREATE TABLE ping_exclude(
                           match varchar(255) PRIMARY KEY);"

    sqlite3 "${DATABASE}" "CREATE TABLE pingers(
                           username varchar(255),
                           match varchar(255) PRIMARY KEY);"

} 2>/dev/null

#===  START  ===================================================================

_log_echo "Started"

while sleep 1; do

    PARSE_MODE="none"
    RAW_MESSAGE=$( curl -s "${URL}/getUpdates" )
      MSG_COUNT=$( jq '.result | length' <<< "${RAW_MESSAGE}" )

    for i in $( seq 1 "${MSG_COUNT:=0}" ); do

        RESULT_COUNTER=$(( i-1 ))

      UPDATE_ID=$( jq .result[${RESULT_COUNTER}].update_id                          <<< "${RAW_MESSAGE}"  )
        CHAT_ID=$( jq .result[${RESULT_COUNTER}].message.chat.id                    <<< "${RAW_MESSAGE}"  )

        #-------------------------------------------------------------------------------
        # Checking that the command was sent to your bot
        #-------------------------------------------------------------------------------
        PRIVATE=$( jq  -r .result[${RESULT_COUNTER}].message.chat.type              <<< "${RAW_MESSAGE}"  | sed 's/private/true/' )
      CMD_CHECK=$( jq  -r .result[${RESULT_COUNTER}].message.text                   <<< "${RAW_MESSAGE}"  )
        if [[ "${CMD_CHECK}" =~ ${BOTNAME/$/\\b} ]]; then
            MESSAGE=$( sed -r "s/${BOTNAME}//"                                      <<< "${CMD_CHECK}"    )
        else
            MESSAGE="${CMD_CHECK}"
        fi
        if [[ ! "${MESSAGE}" =~ ^/manage ]]; then # ----------  start of manage check if  ----------
            MESSAGE=$( sed "s/\"/\\\"/g;s/'/\\'/g"                                  <<< "${MESSAGE}"      | xargs 2>/dev/null     )
          R_MESSAGE=$( sed 's/ё/е/g'                                                <<< "${MESSAGE,,}"    )

          #-------------------------------------------------------------------------------
          # Google command parser
          #-------------------------------------------------------------------------------
            if [[ $( sqlite3 "${DATABASE}"                                                               \
               "SELECT EXISTS(
                    SELECT 1 FROM google_ignore 
                    WHERE \"${MESSAGE,,}\" 
                    LIKE '%'||google_ignore.ignore||'%'
                    ) LIMIT 1;" ) -eq 0 ]]                                                               \
               &&                                                                                        \
               [[ $( sqlite3 "${DATABASE}"                                                               \
               "SELECT EXISTS(
                    SELECT 1 FROM google 
                    WHERE \"${MESSAGE,,}\" 
                    LIKE '%'||google.match||'%'
                    ) LIMIT 1;" ) -eq 1 ]]; then

                    MATCH=$( sqlite3 "${DATABASE}"                                                       \
                            "SELECT * FROM google 
                             WHERE \"${MESSAGE,,}\" 
                             LIKE '%'||google.match||'%';"                                               |\
                             awk '{printf length; printf " "; print $0}'                                 |\
                             sort -rn | awk '{$1=""; print $0}' | head -1 | xargs                        ) 

                    MESSAGE=$( sed -r "s#${MATCH}(\s*\S+)#/google\1#i"             <<< "${MESSAGE}"      )
                fi

          #-------------------------------------------------------------------------------
          # Rick and Morty easter egg
          #-------------------------------------------------------------------------------
            MESSAGE=$( sed -r "s/^SHOW ME WHAT YOU GOT/\/show/"                     <<< "${MESSAGE}"      )

          #-------------------------------------------------------------------------------
          # Weather token check
          #-------------------------------------------------------------------------------
            RE="^/w\\b|^/weather\\b"
            [[ ${MESSAGE} =~ ${RE} ]] && [[ -z "${WEATHER_TOKEN}" ]] && MESSAGE="/none${MESSAGE}"

          #-------------------------------------------------------------------------------
          # Parsing pingers in message if message doesn't start with command
          #-------------------------------------------------------------------------------
            if [[ ! "${MESSAGE}" =~ ^/[a-zA-Z0-9]+ ]] && [[ $( sqlite3 "${DATABASE}"                      \
                                                               "SELECT EXISTS(
                                                                    SELECT 1 FROM ping_phrases 
                                                                    WHERE \"${R_MESSAGE}\" 
                                                                    LIKE '%'||ping_phrases.phrase||'%'
                                                                    ) LIMIT 1;"                           )\
                  -eq 1 ]]; then
                        MESSAGE=$( sed -r "s/^/\/ping &/"                <<< "${R_MESSAGE//ё/е}"          )
            fi

          #-------------------------------------------------------------------------------
          # Auto answer
          #-------------------------------------------------------------------------------
            if [[ ! "${MESSAGE}" =~ ^/[a-zA-Z0-9]+ ]] && [[ $( sqlite3 "${DATABASE}"                      \
                                                               "SELECT EXISTS(
                                                                    SELECT 1 FROM answers
                                                                    WHERE \"${R_MESSAGE}\" 
                                                                    LIKE '%'||answers.match||'%'
                                                                    ) LIMIT 1"                            )\
                  -eq 1 ]]; then
                        MESSAGE=$( sed -r "s/^/\/answer &/"              <<< "${R_MESSAGE}"               )
            fi

        fi # ----------  end of manage check if  ----------

           ARGS=$( awk '{$1="";print $0}'                                           <<< "${MESSAGE}"      | xargs 2>/dev/null )
        COMMAND=$( awk '{print $1}'                                                 <<< "${MESSAGE}"      )
         SENDER=$( jq  -r .result[${RESULT_COUNTER}].message.from.username          <<< "${RAW_MESSAGE}"  )

#===  COMMANDS  ================================================================

        case "${COMMAND}" in

        #===  COMMAND  =================================================================
        #          NAME:  /weather or /w
        #   DESCRIPTION:  Weather in the city for now, today and tommorow
        #    PARAMETERS:  City
        #===============================================================================
           /w|/weather)

               WEATHER_API_CRUTCH=false
               CITY=""
               PARSE_MODE="markdown"

               while [ "${CITY}" == "" -o "${CITY}" == "null" ]; do
                [[ -z ${ARGS} ]] && [[ $(sqlite3 "${DATABASE}"                                        \
                                         "SELECT EXISTS(
                                              SELECT 1 FROM locations
                                              WHERE \"${SENDER}\"
                                              LIKE locations.username
                                              ) LIMIT 1;"                                             \
                                         ) -eq 1 ]] && \
                ARGS=$( sqlite3 "${DATABASE}" "SELECT city 
                                              FROM locations 
                                              WHERE \"${SENDER}\" 
                                              LIKE locations.username;"                               )

                RAW_WEATHER=$( _weather_request )
                       CITY=$( jq -r .data.request[0].query                      <<< "${RAW_WEATHER}" )

                   [ "${CITY}" == "" -o "${CITY}" == "null" ] && [[ "${WEATHER_API_CRUTCH}" == "true" ]] && break 
                   [ "${CITY}" == "" -o "${CITY}" == "null" ] && WEATHER_API_CRUTCH=true

               done

                       TEMP=$( jq -r .data.current_condition[0].temp_C           <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                    COMMENT=$( jq -r .data.current_condition[0].lang_ru[0].value <<< "${RAW_WEATHER}" )
                UPDATE_TIME=$( jq -r .data.current_condition[0].observation_time <<< "${RAW_WEATHER}" |\
                               xargs -i date -d 'TZ="UTC" {}' +"%H:%M" 2>/dev/null )
                  NOW_EMOJI=$( jq -r .data.current_condition[0].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )

                  MORNING_C=$( jq -r .data.weather[0].hourly[2].tempC            <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                     NOON_C=$( jq -r .data.weather[0].hourly[5].tempC            <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                  EVENING_C=$( jq -r .data.weather[0].hourly[8].tempC            <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                MORNING_CMT=$( jq -r .data.weather[0].hourly[2].lang_ru[0].value <<< "${RAW_WEATHER}" )
                   NOON_CMT=$( jq -r .data.weather[0].hourly[5].lang_ru[0].value <<< "${RAW_WEATHER}" )
                EVENING_CMT=$( jq -r .data.weather[0].hourly[8].lang_ru[0].value <<< "${RAW_WEATHER}" )
              MORNING_EMOJI=$( jq -r .data.weather[0].hourly[2].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )
                 NOON_EMOJI=$( jq -r .data.weather[0].hourly[5].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )
              EVENING_EMOJI=$( jq -r .data.weather[0].hourly[8].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )

                T_MORNING_C=$( jq -r .data.weather[1].hourly[2].tempC            <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                   T_NOON_C=$( jq -r .data.weather[1].hourly[5].tempC            <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
                T_EVENING_C=$( jq -r .data.weather[1].hourly[8].tempC            <<< "${RAW_WEATHER}" | sed '/^[0-9]/s/^/+/' )
              T_MORNING_CMT=$( jq -r .data.weather[1].hourly[2].lang_ru[0].value <<< "${RAW_WEATHER}" )
                 T_NOON_CMT=$( jq -r .data.weather[1].hourly[5].lang_ru[0].value <<< "${RAW_WEATHER}" )
              T_EVENING_CMT=$( jq -r .data.weather[1].hourly[8].lang_ru[0].value <<< "${RAW_WEATHER}" )
            T_MORNING_EMOJI=$( jq -r .data.weather[1].hourly[2].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )
               T_NOON_EMOJI=$( jq -r .data.weather[1].hourly[5].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )
            T_EVENING_EMOJI=$( jq -r .data.weather[1].hourly[8].weatherCode      <<< "${RAW_WEATHER}" | _get_emoji )



                if [[ "${CITY}" == "null" ]] || [[ "${CITY}" == "" ]]
                then
                    PARSE_MODE="none"
                    if [[ ! -z ${ARGS} ]]; then 
                        TEXT="Wrong location!"
                    elif [[ "${ADMINS[*]}" =~ ${SENDER} ]]; then
                        TEXT="You didn't set the default city
                              You can add default city by this command:
                              /manage insert into locations(username,city) values(\"default_city\",\"YOUR CITY HERE\")"
                            
                    else
                        TEXT="Administrator didn't set the default city
                              Try /w City"
                    fi
                else
                    TEXT=$( echo -e \
                    "*Now:*
                     *[${UPDATE_TIME}]:* ${TEMP} ${NOW_EMOJI} ${COMMENT}
                     ${CITY}

                     *Today:*
                     *Morning:* ${MORNING_C} ${MORNING_EMOJI} ${MORNING_CMT}
                     *Noon:* ${NOON_C} ${NOON_EMOJI} ${NOON_CMT}
                     *Evening:* ${EVENING_C} ${EVENING_EMOJI} ${EVENING_CMT} 

                     *Tommorow:* 
                     *Morning:* ${T_MORNING_C} ${T_MORNING_EMOJI} ${T_MORNING_CMT}
                     *Noon:* ${T_NOON_C} ${T_NOON_EMOJI} ${T_NOON_CMT}
                     *Evening:* ${T_EVENING_C} ${T_EVENING_EMOJI} ${T_EVENING_CMT} 
                     ")
                fi

                _send_text "${TEXT}"
                _log_echo "Weather \"${CITY}\" to @${SENDER}"                               
                ;;

        #===  COMMAND  =================================================================
        #          NAME:  /info
        #   DESCRIPTION:  Information about this bot
        #    PARAMETERS:  
        #===============================================================================
           /info)

                TEXT=$( sed 's/^\s\+//' <<<\
                     "This is my first bot on Bash.
                      You can see the code here https://github.com/Cuttlerat/bashbot
                      by @Cuttlerat" )
                _send_text "${TEXT}"
                ;;

        #===  COMMAND  =================================================================
        #          NAME:  /start
        #   DESCRIPTION:  List of commands
        #    PARAMETERS:  
        #===============================================================================
           /start)

               TEXT=$( sed 's/^ \+//' <<<"
                     Commands:
                     /weather <City>     - Weather in a city for now, today and tommorow
                     /w <City>           - Short form of /w
                     /info               - Information about this bot  
                     /wset <City>        - Set default city for /weather
                     /ibash <Number>     - Random quote from ibash.org.ru
                     /loglist <Number>   - Random quote from loglist.net
                     /roll               - Rolling a random number from 0 to 99
                     /google <String>    - Send a link to google.com/String 
                     /md5 <String>       - Creating a md5 sum of String 
                     /manage <SQL query> - Manage your database (Only for admins)
                     " )
                    
               _send_text "${TEXT}"
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  /ibash
        #   DESCRIPTION:  Random quote from ibash.org.ru
        #    PARAMETERS:  Number of quotes
        #===============================================================================
           /ibash)

                _qcycle "ibash"
                ;;

        #===  COMMAND  =================================================================
        #          NAME:  /loglist
        #   DESCRIPTION:  Random quote from loglist.net
        #    PARAMETERS:  Number of quotes
        #===============================================================================
           /loglist)

                _qcycle "loglist"
                ;;

        #===  COMMAND  =================================================================
        #          NAME:  /wset
        #   DESCRIPTION:  Configure a default city for /weather command 
        #                 for user who call it
        #    PARAMETERS:  City or "Delete"
        #===============================================================================
           /wset)
                
                if [[ $(sqlite3 "${DATABASE}"                                     \
                                     "SELECT EXISTS(
                                          SELECT 1 FROM locations
                                          WHERE \"${SENDER}\"
                                          LIKE locations.username
                                          ) LIMIT 1;"                             \
                                     ) -eq 1 ]]; then
                    if [[ -z ${ARGS} ]] || [[ ${ARGS} =~ [Dd]elete ]]; then
                        sqlite3 "${DATABASE}"                                     \
                            "DELETE FROM locations
                             WHERE \"${SENDER}\"
                             LIKE locations.username"
                        TEXT="Deleted information about @${SENDER}"
                    else
                        sqlite3 "${DATABASE}"                                     \
                            "UPDATE locations 
                             SET city=\"${ARGS}\"
                             WHERE username=\"${SENDER}\""
                        TEXT="New city for @${SENDER}: ${ARGS}"
                    fi
                else
                    if [[ -z ${ARGS} ]] || [[ ${ARGS} =~ [Dd]elete ]]; then
                        TEXT="No information about @${SENDER}"
                    else
                    sqlite3 "${DATABASE}"                                        \
                        "INSERT INTO locations(username, city)
                         VALUES(\"${SENDER}\",\"${ARGS}\")"
                    TEXT="Added @${SENDER}: ${ARGS}"
                    fi
                fi
                _send_text "${TEXT}"
                _log_echo "$TEXT"
                ;;

        #===  COMMAND  =================================================================
        #          NAME:  /md5
        #   DESCRIPTION:  Encode a message into md5
        #    PARAMETERS:  String
        #===============================================================================
           /md5)

                TEXT=$( md5sum <<< "${ARGS}" | awk '{print $1}' )
                _send_text "${TEXT}"
                _log_echo "MD5 to @${SENDER}"
                ;;

        #===  COMMAND  =================================================================
        #          NAME:  /google
        #   DESCRIPTION:  Sending a link into google on a entered string
        #    PARAMETERS:  String
        #===============================================================================
           /google)

               ARGS=${ARGS//\?/}
               PREVIEW=0
               TEXT="https://www.google.ru/search?q=${ARGS// /+}"
               _send_text "${TEXT}"
               _log_echo "Google: \"${ARGS}\" by @${SENDER}"
               PREVIEW=1
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  /show
        #   DESCRIPTION:  Sending a Rick and Morty yotube video 
        #    PARAMETERS:  
        #===============================================================================
           /show)

               PREVIEW=0
               TEXT="https://www.youtube.com/watch?v=I1188GO4p1E"
               _send_text "${TEXT}"
               _log_echo "Shchwifty by @${SENDER}"
               PREVIEW=1
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  /roll
        #   DESCRIPTION:  Rolling a random number from 0 to 99
        #    PARAMETERS:  
        #===============================================================================
           /roll)
           
               ARGS=$( sed 's/.*[^0-9].*/100/' <<< "${ARGS:-100}" )
               TEXT=$(( RANDOM % ARGS ))
               _send_text "${TEXT}"
               _log_echo "Rolled \"${TEXT}\" by @${SENDER}"
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  /ping
        #   DESCRIPTION:  This is not for direct call. This command uses
        #                 to call a user by a regular expression stroed into 
        #                 ${DATABASE}
        #    PARAMETERS:  String
        #===============================================================================
           /ping)
               

               TEXT=$( sqlite3 "${DATABASE}"                            \
                   "SELECT DISTINCT username 
                    FROM pingers 
                    WHERE \"${ARGS,,}\" 
                    LIKE '%'||pingers.match||'%';"                      )
               if [[ "${TEXT}" =~ EVERYONE\ GET\ IN\ HERE ]]; then
                   if [[ $( sqlite3 "${DATABASE}"                  \
                               "SELECT EXISTS(
                                    SELECT 1 FROM ping_exclude 
                                    WHERE \"${ARGS,,}\" 
                                    LIKE '%'||ping_exclude.match||'%'
                                    ) LIMIT 1;"                    )\
                                    -eq 1 ]]; then
                      TEXT=$( sqlite3 "${DATABASE}"                \
                             "SELECT DISTINCT username
                              FROM pingers
                              WHERE \"${TEXT} ${SENDER}\"
                              NOT LIKE '%'||username||'%'" )
                   else
                   TEXT=$( sqlite3 "${DATABASE}"                        \
                       "SELECT DISTINCT username 
                        FROM pingers 
                        WHERE username 
                        NOT LIKE \"EVERYONE GET IN HERE\"
                        AND username
                        NOT LIKE \"${SENDER}\""                             )
                   fi
               fi
               if [[ ! -z "${TEXT}" ]]; then
                   TEXT=$( sed -r 's/\b(.+)\b/@\1/g' <<< "${TEXT}" | xargs )
                   _send_text "${TEXT}"
                   _log_echo "Ping to \"${TEXT}\" by @${SENDER}"
               fi
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  /answer
        #   DESCRIPTION:  Auto answer on a match in message
        #    PARAMETERS:  String
        #===============================================================================
           /answer)

              
               while read -r TEXT; do                 
                   if [[ ! -z "${TEXT}" ]]; then
                       _send_text "${TEXT}"
                       _log_echo "Answer to \"${SENDER}\""
                   fi
               done < <( sqlite3 "${DATABASE}"                   \
                           "SELECT string FROM answers 
                            WHERE \"${ARGS,,}\" 
                            LIKE '%'||answers.match||'%';"       )
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  /manage
        #   DESCRIPTION:  Run a sqlite request
        #    PARAMETERS:  String
        #===============================================================================
           /manage)

               if [[ "${ADMINS[*]}" =~ ${SENDER} ]]; then
                   if [[ "${MESSAGE}" =~ \/manage\ ?$ ]]; then
                       TEXT="Usage \"/manage COMMAND\""
                   else
                       MESSAGE="$( cut -d' ' -f2- <<< "${MESSAGE}" )"
                       TEXT=$( sqlite3 "${DATABASE}" "${MESSAGE}" 2>&1 )
                       _log_echo "Manage \"${MESSAGE}\" by \"${SENDER}\""
                   fi
               else
                   TEXT="You are not an administrator. The incident will be reported"
                   _log_echo "Trying to manage by \"${SENDER}\""
               fi
                   _send_text "${TEXT}"
               ;;

        #===  COMMAND  =================================================================
        #          NAME:  
        #   DESCRIPTION:  Default message when user calling incorrect command
        #    PARAMETERS:  String
        #===============================================================================
           /*)

               if [[ ${PRIVATE} == "true" ]] || [[ $CMD_CHECK =~ /*${BOTNAME} ]]; then                               
                   TEXT="Unknown command"                                                   
                   _send_text "${TEXT}"                                                               
                   _log_echo "Bad command \"${CMD_CHECK}\" by @${SENDER}"
               fi
               ;;

        esac
        _offset
   done
done
